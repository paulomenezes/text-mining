<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2012 cogroo <cogroo@cogroo.org>

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="CoGrOO-AddOn" default="default" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <!-- Define Maven-ant-tasks -->
    <path id="maven-ant-tasks.classpath" path="nbproject/tasks/maven-ant-tasks-2.0.10.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
            uri="antlib:org.apache.maven.artifact.ant"
            classpathref="maven-ant-tasks.classpath" />

    <description>Builds, tests, and runs the project extension project.</description>
    <import file="nbproject/build-uno-impl.xml"/>



    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -pre-uno-package:          called before OXT creation
      -post-uno-package:         called after OXT creation
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="TypeBrowser2-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <!--<target name="download-resources">
         Download CogrooBase and unpack it inside dist folder 
        <artifact:dependencies filesetId="dependency.fileset"
            sourcesFilesetId="sources.dependency.fileset"
            javadocFilesetId="javadoc.dependency.fileset"
            versionsId="dependency.versions">

            <dependency
                groupId="br.usp.pcs.lta.cogroo"
                artifactId="CoGrOOBase"
                version="3.2.1-SNAPSHOT"
                type="zip"
                scope="provided"
                classifier="bin"/>

        </artifact:dependencies>

        <copy todir="tmp/base">
            <fileset refid="dependency.fileset"/>
            <mapper classpathref="maven-ant-tasks.classpath"
                classname="org.apache.maven.artifact.ant.VersionMapper"
                from="${dependency.versions}" to="flatten" />
        </copy>
    </target>-->

    <!--<target name="-post-uno-package">
        <deltree dir="tmp/base/CoGrOOBase-bin.zip/registry" />

        <unzip src="tmp/base/CoGrOOBase-bin.zip"
            dest="tmp/base/CoGrOOBase-bin/registry/data/org/cogroo/oooext/">
            <patternset>
                <exclude name="**/*.jar"/>
            </patternset>
        </unzip>

        <zip update="true" destfile="${uno.package.name}">
            <fileset dir="tmp/base/CoGrOOBase-bin" casesensitive="yes"/>
        </zip>

    </target>-->

    <target name="-post-clean">

        <delete dir="tmp" />

    </target>

    <target name="download-libs">
        <mkdir dir="lib"/>
        <delete includeemptydirs="true">
            <fileset dir="lib" includes="**/*.jar" defaultexcludes="false"/>
        </delete>


        <artifact:dependencies filesetId="dependency.fileset"
            sourcesFilesetId="sources.dependency.fileset"
            javadocFilesetId="javadoc.dependency.fileset"
            versionsId="dependency.versions"
            settingsFile="mvn_settings.xml">


            <dependency
                groupId="org.cogroo.lang.pt_br"
                artifactId="cogroo-gc-pt_br"
                version="4.0.0-SNAPSHOT"/>

            <dependency
                groupId="commons-codec"
                artifactId="commons-codec"
                version="1.4"
                />

        </artifact:dependencies>

        <copy todir="lib">
            <fileset refid="dependency.fileset" />
            <mapper classpathref="maven-ant-tasks.classpath"
                  classname="org.apache.maven.artifact.ant.VersionMapper"
                  from="${dependency.versions}" to="flatten" />
        </copy>


    </target>

</project>
